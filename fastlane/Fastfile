# frozen_string_literal: true

# Leka - iOS Monorepo
# Copyright 2023 APF France handicap
# SPDX-License-Identifier: Apache-2.0

# auto update fastlane
# update_fastlane

require 'json'

default_platform(:ios)

ROOT_DIR = File.expand_path('..', Dir.pwd).to_s.freeze
SIGNING_DIR = "#{ROOT_DIR}/Tuist/Signing"

RELEASE_BUNDLE_IDS = [
  'io.leka.apf.app.LekaApp',
  'io.leka.apf.app.LekaUpdater',
  'io.leka.apf.app.LekaActivityUIExplorer'
].freeze

DEVELOPMENT_WILDCARD_BUNDLE_ID = 'io.leka.apf.*'

platform :ios do
  desc "Placeholder lane to make sure fastlane's working"
  lane :helloworld do
    UI.important "Hello, Fastlane! (from #{Dir.pwd}, root: #{ROOT_DIR}, signing: #{SIGNING_DIR})"
  end

  desc 'Sync certificates'
  lane :sync_certificates do |options|
    UI.important 'Delete local provisioning profiles'
    system("rm -rf #{SIGNING_DIR}")

    create_keychain(
      name: 'io.leka.fastlane.keychain',
      timeout: 0,
      unlock: true,
      password: ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil)
    )

    match(
      type: 'development',
      app_identifier: DEVELOPMENT_WILDCARD_BUNDLE_ID,
      readonly: true,
      output_path: "#{SIGNING_DIR}/raw/dev",
      keychain_name: 'io.leka.fastlane.keychain'
    )

    if options[:release]
      match(
        type: 'appstore',
        app_identifier: RELEASE_BUNDLE_IDS,
        readonly: true,
        output_path: "#{SIGNING_DIR}/raw/release",
        keychain_name: 'io.leka.fastlane.keychain'
      )
    end

    UI.important 'Create development provisioning profile'
    UI.message 'Generate json graph'

    Dir.chdir('..') do
      system(
        'tuist graph ' \
        '--format json ' \
        '--skip-test-targets --skip-external-dependencies ' \
        "--output-path #{SIGNING_DIR}/raw"
      )
    end

    UI.message 'Parse json graph'
    json = File.read("#{SIGNING_DIR}/raw/graph.json")
    graph = JSON.parse(json)
    all_apps = graph['projects'].map do |_project_path, project|
      project['name']
    end

    UI.message 'Copy wildcard provisioning profile for each app'
    all_apps.each do |app|
      UI.message "App: #{app} --> Bundle ID: io.leka.apf.*"
      system(
        'cp -f ' \
        "#{SIGNING_DIR}/raw/dev/Development_io.leka.apf.*.mobileprovision " \
        "#{SIGNING_DIR}/#{app}.Debug.mobileprovision"
      )
    end

    UI.important 'Copy development .cer & .p12 files'
    dev_certs = Dir.entries("#{SIGNING_DIR}/raw/dev").select { |f| f.end_with?('cer') || f.end_with?('p12') }
    dev_certs.each do |cert|
      system("cp -f #{SIGNING_DIR}/raw/dev/#{cert} #{SIGNING_DIR}/#{cert}")
    end

    UI.important 'Create release provisioning profile'
    release_profiles = Dir.entries("#{SIGNING_DIR}/raw/release").select { |f| f.end_with?('mobileprovision') }
    RELEASE_BUNDLE_IDS.each do |id|
      name = id.delete_prefix('io.leka.apf.app.')
      UI.message "App: #{name} --> Bundle ID: #{id}"
      release_profiles.select { |profile| profile.include?(name) }.map do |profile|
        UI.message "App: #{name} --> Profile: #{profile}"
        if profile.include?('AppStore_')
          system("cp -f #{SIGNING_DIR}/raw/release/#{profile} #{SIGNING_DIR}/#{name}.Release.mobileprovision")
        end
      end
    end

    UI.important 'Copy release .cer & .p12 files'
    release_certs = Dir.entries("#{SIGNING_DIR}/raw/release").select do |f|
      f.end_with?('cer') || f.end_with?('p12')
    end
    release_certs.each do |cert|
      system("cp -f #{SIGNING_DIR}/raw/release/#{cert} #{SIGNING_DIR}/#{cert}")
    end

    UI.message 'List newly created certificates and profiles'
    system("ls -la #{SIGNING_DIR}")
  end

  desc 'Create certificates'
  lane :create_certificates do |options|
    create_keychain(
      name: 'io.leka.fastlane.keychain',
      timeout: 0,
      unlock: true
    )

    match(
      type: 'development',
      app_identifier: DEVELOPMENT_WILDCARD_BUNDLE_ID,
      force_for_new_devices: true,
      keychain_name: 'io.leka.fastlane.keychain'
    )

    if options[:release]
      match(
        type: 'appstore',
        app_identifier: RELEASE_BUNDLE_IDS,
        keychain_name: 'io.leka.fastlane.keychain'
      )
    end
  end

  desc 'Submit new internal beta app'
  lane :beta_internal do |options|
    UI.user_error! 'A target must be specified, for example: LekaApp, LekaUpdater, etc.' if options[:targets].nil?

    apps = []

    if options[:targets] == 'all'
      UI.important 'All apps will be built'
      apps = RELEASE_BUNDLE_IDS.map { |app| File.extname(app.to_s).delete('.') }
    else
      apps += options[:targets].split(',')
      UI.important "The following apps will be built: #{apps}"
    end

    build_date = Time.new.strftime('%Y_%m_%d')

    apps.each do |app|
      UI.header "Generate, build & upload #{app}"
      Dir.chdir('..') do
        sh('tuist', 'generate', '-n', app.to_s)
      end

      app_id = "io.leka.apf.app.#{app}"
      app_xcodeproj = "#{ROOT_DIR}/Apps/#{app}/#{app}.xcodeproj"

      begin
        if is_ci
          app_store_connect_api_key(
            key_id: ENV.fetch('APP_STORE_CONNECT_API_KEY_ID', nil),
            issuer_id: ENV.fetch('APP_STORE_CONNECT_ISSUER_ID', nil),
            key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT', nil)
          )

          unlock_keychain(
            path: 'io.leka.fastlane.keychain',
            password: ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil)
          )
          system('security', 'set-key-partition-list', '-S', 'apple-tool:,apple:', '-s', '-k',
                 ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil), 'io.leka.fastlane.keychain')
        end

        version_number = get_version_number(xcodeproj: app_xcodeproj.to_s)
        build_number = latest_testflight_build_number(app_identifier: app_id.to_s) + 1

        increment_build_number(
          build_number: build_number,
          xcodeproj: app_xcodeproj.to_s
        )

        build_app(
          workspace: 'ios-monorepo.xcworkspace',
          scheme: app,
          output_directory: './.build',
          output_name: "#{build_date}-#{app}-v#{version_number}-#{build_number}"
        )

        upload_to_testflight(
          app_identifier: app_id.to_s,
          skip_waiting_for_build_processing: true,
          distribute_external: false
        )
      ensure
        next unless is_ci

        delete_keychain(
          name: 'io.leka.fastlane.keychain'
        )
      end
    end
  end
end
