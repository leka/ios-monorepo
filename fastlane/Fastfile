# frozen_string_literal: true

# Leka - iOS Monorepo
# Copyright APF France handicap
# SPDX-License-Identifier: Apache-2.0

# auto update fastlane
# update_fastlane

fastlane_require 'json'
fastlane_require 'open3'

default_platform(:ios)

ROOT_DIR = File.expand_path('..', Dir.pwd).to_s.freeze

GIT_BASE_REF = ENV.fetch('BASE_REF', 'develop')

RELEASE_BUNDLE_IDS = [
  'io.leka.apf.app.LekaApp',
  'io.leka.apf.app.LekaApp.beta',
  'io.leka.apf.app.LekaUpdater'
].freeze

DEVELOPMENT_WILDCARD_BUNDLE_ID = 'io.leka.apf.*'

platform :ios do
  desc "Placeholder lane to make sure fastlane's working"
  lane :helloworld do
    UI.important "Hello, Fastlane! (from #{Dir.pwd}, root: #{ROOT_DIR})"
  end

  desc 'Sync certificates'
  lane :sync_certificates do |options|
    UI.important 'Delete local provisioning profiles'

    create_keychain(
      name: 'io.leka.fastlane.keychain',
      timeout: 0,
      unlock: true,
      password: ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil)
    )

    match(
      type: 'development',
      app_identifier: DEVELOPMENT_WILDCARD_BUNDLE_ID,
      readonly: true,
      keychain_name: 'io.leka.fastlane.keychain'
    )

    if options[:release]
      match(
        type: 'appstore',
        app_identifier: RELEASE_BUNDLE_IDS,
        readonly: true,
        keychain_name: 'io.leka.fastlane.keychain'
      )
    end
  end

  desc 'Create certificates'
  lane :create_certificates do |options|
    create_keychain(
      name: 'io.leka.fastlane.keychain',
      timeout: 0,
      unlock: true
    )

    match(
      type: 'development',
      app_identifier: DEVELOPMENT_WILDCARD_BUNDLE_ID,
      force_for_new_devices: true,
      keychain_name: 'io.leka.fastlane.keychain'
    )

    if options[:release]
      match(
        type: 'appstore',
        app_identifier: RELEASE_BUNDLE_IDS,
        keychain_name: 'io.leka.fastlane.keychain'
      )
    end
  end

  desc 'Submit new internal beta app'
  lane :beta_internal do |options|
    UI.user_error! 'A target must be specified, for example: LekaApp, LekaUpdater, etc.' if options[:targets].nil?

    apps = []

    UI.header 'Step: Set targets to build'
    if options[:targets] == 'all'
      apps = RELEASE_BUNDLE_IDS.map { |app| File.extname(app.to_s).delete('.') }
      UI.important 'All targets will be built:'
    else
      apps += options[:targets].split(',')
      UI.important 'The following targets will be built:'
    end
    UI.important apps.to_s

    apps.each do |app|
      app_bundle_id = "io.leka.apf.app.#{app}.beta"
      app_xcodeproj = "#{ROOT_DIR}/Apps/#{app}/#{app}.xcodeproj"

      UI.header "Step: Generate, build & upload target: #{app} / #{app_bundle_id} / #{app_xcodeproj}"

      Dir.chdir('..') do
        ENV['TUIST_TURN_OFF_LINTERS'] = 'TRUE'
        ENV['TUIST_GENERATE_MODULES_AS_FRAMEWORKS_FOR_DEBUG'] = 'FALSE'
        ENV['TUIST_GENERATE_L10N_SCHEMES'] = 'FALSE'
        ENV['TUIST_GENERATE_EXAMPLE_TARGETS'] = 'FALSE'
        ENV['TUIST_DEVELOPER_MODE'] = 'TRUE'
        ENV['TUIST_TESTFLIGHT_BUILD'] = 'TRUE'
        ENV['TUIST_PRODUCTION_BUILD'] = 'FALSE'
        ENV['TUIST_FASTLANE_BUILD'] = 'TRUE'
        ENV['TUIST_FASTLANE_MATCH_APP_BUNDLE_ID'] = app_bundle_id.to_s
        system('tuist', 'generate', '--no-open', '--no-binary-cache', app.to_s)
      end

      begin
        if ENV['CI']
          app_store_connect_api_key(
            key_id: ENV.fetch('APP_STORE_CONNECT_API_KEY_ID', nil),
            issuer_id: ENV.fetch('APP_STORE_CONNECT_ISSUER_ID', nil),
            key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT', nil)
          )

          unlock_keychain(
            path: 'io.leka.fastlane.keychain',
            password: ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil)
          )

          UI.header 'Step: keychain security set-key-partition-list'
          system('security', 'set-key-partition-list', '-S', 'apple-tool:,apple:', '-s', '-k',
                 ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil), 'io.leka.fastlane.keychain')
        end

        pr_number = lambda {
          if ENV['PR_NUMBER'] && !ENV['PR_NUMBER'].empty?
            pr_number = ENV['PR_NUMBER']
          else
            `gh pr view --json number -q .number`.strip.tap do |output|
              output.replace('NO_PR') if output.empty?
              pr_number = output
            end
          end
        }.call

        UI.header 'Step: Create verson and new build number'

        version_number = get_version_number(xcodeproj: app_xcodeproj.to_s)
        latest_build_number = latest_testflight_build_number(
          app_identifier: app_bundle_id.to_s,
          version: version_number
        ).to_s
        new_build_number = create_new_build_number(latest_build_number: latest_build_number)
        build_date = Time.new.strftime('%Y_%m_%d')

        UI.important "Next release for: #{app_bundle_id}"
        UI.important "Version number: #{version_number}"
        UI.important "Build number: #{new_build_number}"

        testflight_changelog = generate_changelogs(
          release_type: 'beta',
          target: app,
          version_number: version_number,
          latest_build_number: latest_build_number,
          new_build_number: new_build_number,
          pr_number: pr_number
        )

        UI.message testflight_changelog

        increment_build_number(
          build_number: new_build_number,
          xcodeproj: app_xcodeproj.to_s
        )

        build_app(
          export_method: 'app-store',
          export_options: {
            provisioningProfiles: {
              app_bundle_id.to_s => "match AppStore #{app_bundle_id}"
            }
          },
          workspace: 'ios-monorepo.xcworkspace',
          scheme: app,
          output_directory: './.build',
          output_name: "#{build_date}-#{app}-beta-v#{version_number}-#{new_build_number}"
        )

        upload_to_testflight(
          app_identifier: app_bundle_id.to_s,
          ipa: "./.build/#{build_date}-#{app}-beta-v#{version_number}-#{new_build_number}.ipa",
          skip_waiting_for_build_processing: true,
          distribute_external: false,
          groups: %w[LekaTeam],
          changelog: testflight_changelog
        )
      ensure
        next unless ENV['CI']

        delete_keychain(
          name: 'io.leka.fastlane.keychain'
        )
      end
    end
  end

  desc 'Release new app version to App Store Connect'
  lane :release do |options|
    UI.user_error! 'A target must be specified, for example: LekaApp, LekaUpdater, etc.' if options[:target].nil?
    UI.user_error! 'Only one app can be released at a time' if options[:target].split(',').count > 1

    app = options[:target].split(',').first

    UI.header 'Step: Set target to build'
    UI.important "The following targets will be built: #{app}"

    app_bundle_id = "io.leka.apf.app.#{app}"
    app_xcodeproj = "#{ROOT_DIR}/Apps/#{app}/#{app}.xcodeproj"

    UI.header "Step: Generate, build & upload target: #{app} / #{app_bundle_id} / #{app_xcodeproj}"

    Dir.chdir('..') do
      ENV['TUIST_TURN_OFF_LINTERS'] = 'TRUE'
      ENV['TUIST_GENERATE_MODULES_AS_FRAMEWORKS_FOR_DEBUG'] = 'FALSE'
      ENV['TUIST_GENERATE_L10N_SCHEMES'] = 'FALSE'
      ENV['TUIST_GENERATE_EXAMPLE_TARGETS'] = 'FALSE'
      ENV['TUIST_DEVELOPER_MODE'] = 'FALSE'
      ENV['TUIST_TESTFLIGHT_BUILD'] = 'FALSE'
      ENV['TUIST_PRODUCTION_BUILD'] = 'TRUE'
      ENV['TUIST_FASTLANE_BUILD'] = 'TRUE'
      ENV['TUIST_FASTLANE_MATCH_APP_BUNDLE_ID'] = app_bundle_id.to_s
      system('tuist', 'generate', '--no-open', '--no-binary-cache', app.to_s)
    end

    begin
      if ENV['CI']
        app_store_connect_api_key(
          key_id: ENV.fetch('APP_STORE_CONNECT_API_KEY_ID_RELEASE_APP_STORE', nil),
          issuer_id: ENV.fetch('APP_STORE_CONNECT_ISSUER_ID', nil),
          key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT_RELEASE_APP_STORE', nil)
        )

        unlock_keychain(
          path: 'io.leka.fastlane.keychain',
          password: ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil)
        )

        UI.header 'Step: keychain security set-key-partition-list'
        system('security', 'set-key-partition-list', '-S', 'apple-tool:,apple:', '-s', '-k',
               ENV.fetch('FASTLANE_KEYCHAIN_PASSWORD', nil), 'io.leka.fastlane.keychain')
      end

      pr_number = lambda {
        if ENV['PR_NUMBER'] && !ENV['PR_NUMBER'].empty?
          pr_number = ENV['PR_NUMBER']
        else
          `gh pr view --json number -q .number`.strip.tap do |output|
            output.replace('NO_PR') if output.empty?
            pr_number = output
          end
        end
      }.call

      UI.header 'Step: Create verson and new build number'

      version_number = get_version_number(xcodeproj: app_xcodeproj.to_s)
      latest_build_number = latest_testflight_build_number(
        app_identifier: app_bundle_id.to_s,
        version: version_number
      ).to_s
      new_build_number = create_new_build_number(latest_build_number: latest_build_number)
      build_date = Time.new.strftime('%Y_%m_%d')

      UI.important "Next release for: #{app_bundle_id}"
      UI.important "Version number: #{version_number}"
      UI.important "Build number: #{new_build_number}"
      UI.important "Metadata path: #{ROOT_DIR}/fastlane/release/#{app}/metadata"

      # capture_screenshots # ? not working yet

      generate_changelogs(
        release_type: 'release',
        target: app,
        version_number: version_number,
        latest_build_number: latest_build_number,
        new_build_number: new_build_number,
        pr_number: pr_number
      )

      increment_build_number(
        build_number: new_build_number,
        xcodeproj: app_xcodeproj.to_s
      )

      build_app(
        export_method: 'app-store',
        export_options: {
          provisioningProfiles: {
            app_bundle_id.to_s => "match AppStore #{app_bundle_id}"
          }
        },
        workspace: 'ios-monorepo.xcworkspace',
        scheme: app,
        output_directory: './.build',
        output_name: "#{build_date}-#{app}-release-v#{version_number}-#{new_build_number}"
      )

      upload_to_app_store(
        force: true,
        app_identifier: app_bundle_id.to_s,
        ipa: "./.build/#{build_date}-#{app}-release-v#{version_number}-#{new_build_number}.ipa",
        metadata_path: "#{ROOT_DIR}/fastlane/release/#{app}/metadata",
        screenshots_path: "#{ROOT_DIR}/fastlane/release/#{app}/screenshots",
        reject_if_possible: true,
        submit_for_review: true,
        automatic_release: true,
        app_rating_config_path: "#{ROOT_DIR}/fastlane/release/#{app}/metadata/app_rating_config.json",
        submission_information: {
          export_compliance_uses_encryption: false,
          add_id_info_uses_idfa: false,
          content_rights_contains_third_party_content: true,
          content_rights_has_rights: true
        },
        run_precheck_before_submit: true,
        precheck_include_in_app_purchases: false
      )
    ensure
      next unless ENV['CI']

      delete_keychain(
        name: 'io.leka.fastlane.keychain'
      )
    end
  end

  desc 'Generate changelogs for TestFlight, Github and Slack'
  lane :generate_changelogs do |options|
    UI.important options

    release_type = options[:release_type]
    app_name = options[:target].to_s
    version_number = options[:version_number].to_s
    latest_build_number = options[:latest_build_number].to_s
    new_build_number = options[:new_build_number].to_s

    pr_number = options[:pr_number].to_s

    test_flight_commit_sha = build_number_to_commit_sha(build_number: latest_build_number)
    head_commit_sha = build_number_to_commit_sha(build_number: new_build_number)

    base_commit_sha = pr_number == 'NO_PR' ? test_flight_commit_sha.to_s : GIT_BASE_REF

    UI.message "head_commit_sha:        #{head_commit_sha}"
    UI.message "base_commit_sha:        #{base_commit_sha}"
    UI.message "test_flight_commit_sha: #{test_flight_commit_sha}"

    git_log_to_notes_script = "#{ROOT_DIR}/Tools/Scripts/git_log_to_notes.py"

    git_log_with_emojis, stderr_git_log_with_emojis, status_git_log_with_emojis = Open3.capture3(
      'python3',
      git_log_to_notes_script,
      '-f', base_commit_sha.to_s,
      '-l', head_commit_sha.to_s
    )

    git_log_no_emojis, stderr_git_log_no_emojis, status_git_log_no_emojis = Open3.capture3(
      'python3',
      git_log_to_notes_script,
      '-r',
      '-f', base_commit_sha.to_s,
      '-l', head_commit_sha.to_s
    )

    if status_git_log_with_emojis.success? && status_git_log_no_emojis.success?
      UI.success 'Logs generated successfully'
    else
      UI.error 'Could not fetch the changes and generate the logs'
      UI.error stderr_git_log_with_emojis.rstrip
      UI.error stderr_git_log_no_emojis.rstrip
    end

    git_log_for_slack = if git_log_with_emojis.rstrip.empty?
                          '_Could not fetch the changes... Commits may have been overwritten by force push._'
                        else
                          git_log_with_emojis.rstrip
                        end

    git_log_for_github = if git_log_with_emojis.rstrip.empty?
                           '*Could not fetch the changes... Commits may have been overwritten by force push.*'
                         else
                           git_log_with_emojis.rstrip
                         end

    git_log_for_test_flight = if git_log_no_emojis.rstrip.empty?
                                'Could not fetch the changes... Commits may have been overwritten by force push.'
                              else
                                git_log_no_emojis.rstrip
                              end

    UI.message 'Creating CHANGELOG_FOR_SLACK'

    changelog_for_slack = <<~EOF_CHANGELOG_FOR_SLACK
      #{release_type == 'beta' ? ":test_tube: *New TestFlight Build - #{app_name}* :airplane:" : ":bookmark: *New AppStore Release - #{app_name}* :rocket:"}

      New version of #{app_name} is available for testing on TestFlight. Please check the changelog and install the app on your device. :rocket:

      *App*: `#{app_name}`
      *Version*: `#{version_number}`
      *Build*: `#{new_build_number}`
      *Commit*: `#{head_commit_sha}` - https://github.com/leka/ios-monorepo/commit/#{head_commit_sha}
      *PR*: #{pr_number == 'NO_PR' ? 'n/a' : "https://github.com/leka/ios-monorepo/pull/#{pr_number}"}

      *Changes compared to #{pr_number == 'NO_PR' ? "latest TestFlight build `#{latest_build_number}`" : "`#{GIT_BASE_REF}` / `#{head_commit_sha}`"}*:

      ```
      python3 ./Tools/Scripts/git_log_to_notes.py -f #{base_commit_sha} -l #{head_commit_sha}
      ```

      #{git_log_for_slack}
    EOF_CHANGELOG_FOR_SLACK

    UI.message "CHANGELOG_FOR_SLACK:\n#{changelog_for_slack}"

    UI.message 'Creating CHANGELOG_FOR_GITHUB'

    changelog_for_github = <<~EOF_CHANGELOG_FOR_GITHUB
      #{release_type == 'beta' ? "## :test_tube: New TestFlight Build - #{app_name} :airplane:" : "## :bookmark: New AppStore Release - #{app_name} :rocket:"}

      New version of #{app_name} is available for testing. Please check the changelog and install the app on your device. :rocket:

      **App**: #{app_name}
      **Version**: `#{version_number}`
      **Build**: `#{new_build_number}`
      **Commit**: #{head_commit_sha}
      **PR**: #{pr_number == 'NO_PR' ? 'n/a' : "https://github.com/leka/ios-monorepo/pull/#{pr_number}"}

      ## Changes compared to #{pr_number == 'NO_PR' ? "latest TestFlight build `#{latest_build_number}`" : "`#{GIT_BASE_REF}` / #{head_commit_sha}"}

      ```shell
      python3 ./Tools/Scripts/git_log_to_notes.py -f #{base_commit_sha} -l #{head_commit_sha}
      ```

      #{git_log_for_github}
    EOF_CHANGELOG_FOR_GITHUB

    UI.message "CHANGELOG_FOR_GITHUB:\n#{changelog_for_github}"

    UI.message 'Creating CHANGELOG_FOR_TEST_FLIGHT'

    changelog_for_test_flight = <<~EOF_CHANGELOG_FOR_TEST_FLIGHT
      Version: #{version_number}
      Build: #{new_build_number}
      Commit: #{head_commit_sha} - https://github.com/leka/ios-monorepo/commit/#{head_commit_sha}
      PR: #{pr_number == 'NO_PR' ? 'n/a' : "https://github.com/leka/ios-monorepo/pull/#{pr_number}"}

      Changes compared to #{pr_number == 'NO_PR' ? "latest TestFlight build `#{latest_build_number}`" : "#{GIT_BASE_REF} / #{head_commit_sha}"}:

      #{git_log_for_test_flight}
    EOF_CHANGELOG_FOR_TEST_FLIGHT

    UI.message "CHANGELOG_FOR_TEST_FLIGHT:\n#{changelog_for_test_flight}"

    if ENV['CI']
      UI.message 'Writing changelogs to GITHUB_ENV'
      File.write(
        ENV.fetch('GITHUB_ENV', nil).to_s,
        "CHANGELOG_FOR_SLACK<<EOF_CHANGELOG_FOR_SLACK\n" \
        "#{changelog_for_slack}\n" \
        "EOF_CHANGELOG_FOR_SLACK\n\n",
        mode: 'a'
      )
      File.write(
        ENV.fetch('GITHUB_ENV', nil).to_s,
        "CHANGELOG_FOR_GITHUB<<EOF_CHANGELOG_FOR_GITHUB\n" \
        "#{changelog_for_github}\n" \
        "EOF_CHANGELOG_FOR_GITHUB\n\n",
        mode: 'a'
      )
      File.write(
        ENV.fetch('GITHUB_ENV', nil).to_s,
        "CHANGELOG_FOR_TEST_FLIGHT<<EOF_CHANGELOG_FOR_TEST_FLIGHT\n" \
        "#{changelog_for_test_flight}\n" \
        "EOF_CHANGELOG_FOR_TEST_FLIGHT\n\n",
        mode: 'a'
      )
    end

    changelog_for_test_flight
  end

  desc 'Convert commit hash to decimal representation of the first 11 hex characters'
  lane :commit_sha_to_decimal do |options|
    UI.user_error! 'A long_hash must be specified' if options[:long_hash].nil?

    long_hash = options[:long_hash].to_s

    UI.crash! 'Commit hash must be 40 characters' if long_hash.length < 40

    short_hash = long_hash.slice(0, 10)
    short_hash_decimal = short_hash.to_i(16).to_s

    UI.message "Long hash:        #{long_hash}"
    UI.message "Short hash:       #{short_hash}"
    UI.message "Short hash (dec): #{short_hash_decimal}"

    UI.crash! 'Short hash dec must be shorter than 13 characters' if short_hash_decimal.length > 13

    control_hash = build_number_to_commit_sha(build_number: "1234.#{short_hash_decimal}")

    UI.crash! 'Short hash and control hash are NOT equal' unless control_hash.to_s == short_hash.to_s

    UI.success "Short hash (dec): #{short_hash_decimal}"
    short_hash_decimal
  end

  desc 'Convert decimal representation of the first 11 hex characters to commit hash'
  lane :build_number_to_commit_sha do |options|
    UI.user_error! 'A build number must be specified' if options[:build_number].nil?

    build_number = options[:build_number].to_s

    short_hash_decimal = build_number.split('.').last

    UI.crash! 'Short hash dec must be shorter than 13 characters' if short_hash_decimal.length > 13

    short_hash = short_hash_decimal.to_i.to_s(16).rjust(10, '0')

    UI.crash! 'Short hash must be shorter than 10 characters' if short_hash.length > 11

    UI.success "Short hash (hex): #{short_hash}"
    short_hash
  end

  desc 'Create new build number'
  lane :create_new_build_number do |options|
    UI.user_error! 'A build number must be specified' if options[:latest_build_number].nil?

    latest_build_number = options[:latest_build_number].to_s

    new_build_number_major = latest_build_number.split('.').first.to_i + 1

    last_commit_sha = last_git_commit[:commit_hash]

    short_commit_sha_dec = commit_sha_to_decimal(long_hash: last_commit_sha)

    new_build_number = "#{new_build_number_major}.#{short_commit_sha_dec}"

    UI.crash! 'Build number must be 18 characters max' if new_build_number.length > 18

    UI.success "New build number: #{new_build_number}"
    new_build_number
  end
end
